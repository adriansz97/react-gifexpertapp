{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA+BeA,EA7BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEpB,EAAoCC,mBAAS,cAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,uBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAQ,OAAMP,GAAN,mBAAoBO,OAC1CN,EAAc,MAMhB,UACE,6BAAKD,IACL,uBACEQ,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,c,+BCPdG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACfC,EADe,iDACiCC,UAAUR,GAD3C,+DAEFS,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAadM,GAbc,4CAAH,sDCWLO,EATK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC/B,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,6BAAKA,QCqBIO,EAvBC,SAAC,GAAgB,IAAfxB,EAAc,EAAdA,SAEhB,ECH0B,SAACA,GAE3B,MAA0BR,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WAERvB,EAAQL,GACL6B,MAAK,SAACC,GAELH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACzB,IAEG0B,EDjByBK,CAAa/B,GAAhCkB,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDrB,IAEjDyB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAGIH,EAAOJ,KAAI,SAACkB,GAAD,OACT,cAAC,EAAD,eAAgCA,GAAdA,EAAMhB,aEOrBiB,EArBa,WAE1B,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBACC,6BAEG2C,EAAWpB,KAAI,SAACd,EAAUmC,GAAX,OACb,cAAC,EAAD,CAAwBnC,SAAUA,GAApBA,YCLXoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e882f1c5.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nconst AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('Hola mundo');\n  \n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n  \n  const handleSubmit = (e) =>{\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories(category => [ inputValue,...category])\n      setInputValue('');\n    }\n    \n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>{inputValue}</h1>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}/>\n    </form>\n  )\n}\n\nexport default AddCategory","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=8wJd8zU18ZsehMhrRFmY0KKL7elvkbM3`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n  \n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    }\n  })\n  \n  return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ({id, title, url}) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <li>{title}</li>\n    </div>\n  )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n\n  const {data: images, loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n      <div className=\"card-grid\">\n\n        {\n          images.map((image) => (\n            <GifGridItem key={image.id} {...image}/>\n          ))\n        }\n\n      </div>\n    </>\n  )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n\n    getGifs(category)\n      .then((imgs) => {\n\n        setState({\n          data: imgs,\n          loading: false,\n        });\n\n      })\n  }, [category]);\n\n  return state;\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch'])\n\n  return (\n    <>\n      <h1>GifExpertApp</h1>\n      <AddCategory setCategories={ setCategories }/>\n\n      <hr></hr>\n       <ul>\n        {\n          categories.map((category, index) => (\n            <GifGrid key={category} category={category}/>\n          ))\n        }\n      </ul>\n    </>\n  )\n}\n\nexport default GifExpertApp","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}